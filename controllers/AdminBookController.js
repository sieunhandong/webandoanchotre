const Product = require("../models/Product");
const Category = require("../models/Category");
// L·∫•y danh s√°ch t·∫•t c·∫£ s√°ch
exports.getAllProducts = async (req, res) => {
  try {
    const books = await Product.find().populate("category", "name");
    res.status(200).json(books);
  } catch (error) {
    res
      .status(500)
      .json({ message: "L·ªói khi l·∫•y danh s√°ch s√°ch", error: error.message });
  }
};

// L·∫•y th√¥ng tin m·ªôt s√°ch theo ID
exports.getProductById = async (req, res) => {
  try {
    const book = await Product.findById(req.params.id).populate("category");

    if (!book) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y s√°ch" });
    res.status(200).json(book);
  } catch (error) {
    res.status(500).json({ message: "L·ªói khi l·∫•y s√°ch", error: error.message });
  }
};

// ü•¶ T·∫°o s·∫£n ph·∫©m m·ªõi
exports.createProduct = async (req, res) => {
  try {
    const { name, category } = req.body;

    // Ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o
    if (!name) {
      return res.status(400).json({ message: "Vui l√≤ng nh·∫≠p t√™n s·∫£n ph·∫©m." });
    }

    // Ki·ªÉm tra danh m·ª•c t·ªìn t·∫°i
    const categoryExists = await Category.findById(category);
    if (!categoryExists) {
      return res.status(400).json({ message: "Danh m·ª•c kh√¥ng t·ªìn t·∫°i!" });
    }

    // X·ª≠ l√Ω upload ·∫£nh (t·ª´ multer)
    const imageUrls = req.files?.map((file) => file.path) || [];

    // T·∫°o m·ªõi s·∫£n ph·∫©m
    const newProduct = new Product({
      name,
      category,
      image: imageUrls.length > 0 ? imageUrls[0] : null, // n·∫øu c√≥ nhi·ªÅu ·∫£nh, b·∫°n c√≥ th·ªÉ l∆∞u m·∫£ng
    });

    await newProduct.save();
    res.status(201).json({ message: "Th√™m s·∫£n ph·∫©m th√†nh c√¥ng!", product: newProduct });
  } catch (error) {
    console.error("‚ùå L·ªói khi t·∫°o s·∫£n ph·∫©m:", error);
    res.status(500).json({ message: "L·ªói khi t·∫°o s·∫£n ph·∫©m", error: error.message });
  }
};



// üß© C·∫≠p nh·∫≠t s·∫£n ph·∫©m
exports.updateProduct = async (req, res) => {
  try {
    const { id } = req.params;

    // L·∫•y ·∫£nh upload m·ªõi (n·∫øu c√≥)
    const imageUrls = req.files?.map((file) => file.path) || [];

    // Chu·∫©n b·ªã d·ªØ li·ªáu c·∫≠p nh·∫≠t
    const updateData = {
      ...req.body,
    };

    // N·∫øu c√≥ ·∫£nh m·ªõi th√¨ c·∫≠p nh·∫≠t ·∫£nh
    if (imageUrls.length > 0) {
      updateData.image = imageUrls[0];
    } else {
      delete updateData.image;
    }

    // C·∫≠p nh·∫≠t s·∫£n ph·∫©m
    const updatedProduct = await Product.findByIdAndUpdate(id, updateData, { new: true });

    if (!updatedProduct) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m!" });
    }

    res.status(200).json({ message: "C·∫≠p nh·∫≠t s·∫£n ph·∫©m th√†nh c√¥ng!", product: updatedProduct });
  } catch (error) {
    console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t s·∫£n ph·∫©m:", error);
    res.status(500).json({ message: "L·ªói khi c·∫≠p nh·∫≠t s·∫£n ph·∫©m", error: error.message });
  }
};



// üóëÔ∏è X√≥a s·∫£n ph·∫©m
exports.deleteProduct = async (req, res) => {
  try {
    const deletedProduct = await Product.findByIdAndDelete(req.params.id);
    if (!deletedProduct) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m!" });
    }
    res.status(200).json({ message: "X√≥a s·∫£n ph·∫©m th√†nh c√¥ng!" });
  } catch (error) {
    console.error("‚ùå L·ªói khi x√≥a s·∫£n ph·∫©m:", error);
    res.status(500).json({ message: "L·ªói khi x√≥a s·∫£n ph·∫©m", error: error.message });
  }
};

// Qu·∫£n l√Ω danh m·ª•c
exports.getAllCategories = async (req, res) => {
  try {
    const categories = await Category.find();
    res.status(200).json(categories);
  } catch (error) {
    res
      .status(500)
      .json({ message: "L·ªói khi l·∫•y danh m·ª•c", error: error.message });
  }
};

exports.createCategory = async (req, res) => {
  try {
    if (!req.body.name) {
      return res.status(400).json({ message: "T√™n danh m·ª•c l√† b·∫Øt bu·ªôc." });
    }

    const newCategory = new Category(req.body);
    await newCategory.save();
    res.status(201).json({ message: "Danh m·ª•c ƒë√£ ƒë∆∞·ª£c t·∫°o", newCategory });
  } catch (error) {
    res
      .status(500)
      .json({ message: "L·ªói khi t·∫°o danh m·ª•c", error: error.message });
  }
};

exports.updateCategory = async (req, res) => {
  try {
    if (!req.body.name) {
      return res
        .status(400)
        .json({ message: "T√™n danh m·ª•c kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng." });
    }

    const updatedCategory = await Category.findByIdAndUpdate(
      req.params.id,
      req.body,
      { new: true }
    );
    if (!updatedCategory)
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y danh m·ª•c" });

    res
      .status(200)
      .json({ message: "Danh m·ª•c ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t", updatedCategory });
  } catch (error) {
    res
      .status(500)
      .json({ message: "L·ªói khi c·∫≠p nh·∫≠t danh m·ª•c", error: error.message });
  }
};

exports.deleteCategory = async (req, res) => {
  try {
    const categoryId = req.params.id;

    // 1Ô∏è‚É£ Ki·ªÉm tra danh m·ª•c c√≥ t·ªìn t·∫°i kh√¥ng
    const category = await Category.findById(categoryId);
    if (!category) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y danh m·ª•c" });
    }

    // 2Ô∏è‚É£ X√≥a t·∫•t c·∫£ s·∫£n ph·∫©m thu·ªôc danh m·ª•c ƒë√≥
    await Product.deleteMany({ category: categoryId });

    // 3Ô∏è‚É£ X√≥a danh m·ª•c
    await Category.findByIdAndDelete(categoryId);

    res.status(200).json({ message: "Danh m·ª•c v√† c√°c s·∫£n ph·∫©m li√™n quan ƒë√£ ƒë∆∞·ª£c x√≥a" });
  } catch (error) {
    console.error(error);
    res.status(500).json({
      message: "L·ªói khi x√≥a danh m·ª•c",
      error: error.message,
    });
  }
};
